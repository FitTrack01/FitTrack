/**
 * @file Firestore Security Rules for FitFlow Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data (exercise completions)
 *                  and allows public read access to a global list of exercises.  All write operations require
 *                  authentication and proper authorization. Data validation is minimal to support rapid prototyping.
 *
 * @data_structure
 *   /exercises/{exerciseId} - Public collection of exercise definitions.
 *   /users/{userId}/exerciseCompletions/{completionId} - Private collection of user-specific exercise completion records.
 *                                                    Each user can only access their own completion records.
 *
 * @key_security_decisions
 *   - Users cannot list all users.
 *   - Public read access to the /exercises collection.
 *
 * @denormalization_for_authorization Path-based ownership is used for /users/{userId}/exerciseCompletions/{completionId} to avoid get() calls.
 *                                     The userId in the path is used to authorize access to the exercise completion records.
 *
 * @structural_segregation The exercises collection is separated from the users collection to allow for different access controls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to exercises, but restricts write access to authenticated users.
     * @path /exercises/{exerciseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read, enforces owner-only writes.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces strict user-ownership for exercise completions. Only the authenticated user can create, read, update, or delete their own exercise completions.
     * @path /users/{userId}/exerciseCompletions/{completionId}
     * @allow (create) User A can create a new completion record under /users/A/exerciseCompletions/ with a valid completionId.
     * @allow (get, list, update, delete) User A can read, list, update, and delete their own completion record at /users/A/exerciseCompletions/123.
     * @deny (create) User A cannot create a completion record under /users/B/exerciseCompletions/.
     * @deny (get, list, update, delete) User A cannot read, list, update, or delete a completion record at /users/B/exerciseCompletions/123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/exerciseCompletions/{completionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}